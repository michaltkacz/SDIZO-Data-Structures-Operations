#include "time_logger.h"
#include "text_user_interface.h"
#include "my_list.h"
#include <iostream>
#include "my_heap.h"
#include "my_rbtree.h"


using namespace std;

int main()
{
	srand(unsigned int(time(nullptr)));

	int tab[9] = { 7, 5, 9, 6, 7, 8, 10, 1, 11 };
	//int tab[80] = { 73, 96, 2, 98, 85, 65, 35, 72, 20, 53, 67, 27, 41, 56, 17, 21, 23, 69, 82, 36, 88, 87, 45, 63, 7, 11, 13, 43, 51, 8, 99, 34, 94, 40, 92, 9, 46, 76, 84, 25, 39, 4, 89, 24, 30, 33, 50, 64, 95, 60, 74, 47, 38, 61, 91, 59, 10, 3, 57, 75, 79, 16, 86, 68, 54, 31, 22, 66, 14, 48, 29, 18, 37, 52, 28, 1, 80, 19, 32, 90 };
	//int tab[1000] = { 854, 13, 683, 186, 418, 633, 825, 696, 621, 410, 857, 308, 93, 586, 72, 715, 341, 516, 907, 617, 421, 667, 872, 204, 25, 533, 556, 634, 489, 767, 682, 473, 14, 208, 969, 631, 998, 234, 600, 439, 375, 326, 456, 283, 285, 160, 15, 699, 734, 820, 534, 281, 880, 913, 575, 39, 313, 853, 145, 792, 817, 748, 435, 177, 955, 746, 828, 645, 2, 945, 233, 597, 730, 737, 622, 753, 232, 105, 960, 593, 266, 49, 787, 810, 515, 585, 500, 790, 202, 380, 655, 190, 307, 506, 447, 691, 332, 260, 81, 297, 508, 932, 78, 109, 826, 951, 248, 371, 166, 738, 175, 766, 595, 803, 203, 267, 347, 698, 18, 131, 492, 258, 543, 758, 31, 723, 377, 408, 469, 136, 954, 77, 76, 731, 358, 487, 311, 987, 620, 300, 591, 940, 519, 466, 58, 241, 507, 865, 544, 471, 566, 614, 688, 961, 560, 705, 467, 517, 154, 36, 28, 198, 483, 139, 367, 785, 759, 573, 720, 206, 4, 455, 479, 649, 618, 252, 680, 271, 301, 279, 499, 378, 189, 535, 592, 834, 334, 393, 970, 116, 399, 349, 922, 842, 583, 873, 726, 330, 416, 561, 713, 400, 870, 791, 17, 346, 521, 849, 846, 952, 871, 243, 348, 107, 505, 322, 70, 964, 174, 867, 436, 629, 596, 732, 402, 7, 147, 156, 401, 481, 151, 653, 886, 394, 986, 807, 550, 344, 359, 619, 948, 765, 973, 224, 978, 238, 314, 988, 678, 321, 88, 66, 472, 452, 222, 461, 793, 165, 503, 816, 398, 735, 329, 850, 523, 152, 628, 827, 610, 63, 689, 220, 287, 458, 789, 547, 305, 626, 342, 102, 883, 384, 362, 808, 128, 769, 257, 191, 360, 752, 406, 142, 781, 339, 26, 893, 319, 437, 486, 484, 264, 712, 882, 290, 277, 644, 574, 185, 35, 729, 935, 819, 242, 221, 938, 811, 835, 294, 671, 167, 739, 511, 453, 396, 625, 448, 184, 684, 423, 856, 717, 370, 637, 972, 169, 117, 20, 934, 673, 43, 509, 774, 900, 908, 56, 584, 568, 863, 974, 564, 51, 831, 149, 874, 994, 302, 292, 212, 647, 687, 582, 763, 146, 176, 906, 608, 493, 892, 901, 407, 268, 559, 946, 296, 38, 919, 565, 178, 429, 976, 993, 818, 62, 757, 171, 47, 898, 650, 98, 217, 155, 670, 999, 411, 443, 686, 903, 814, 754, 441, 555, 656, 336, 918, 796, 888, 624, 538, 309, 697, 75, 253, 103, 891, 780, 995, 306, 299, 424, 939, 632, 957, 635, 887, 180, 806, 445, 207, 183, 936, 53, 975, 205, 84, 772, 97, 724, 928, 343, 804, 899, 609, 278, 858, 110, 642, 420, 231, 488, 389, 200, 681, 923, 658, 288, 539, 675, 933, 381, 498, 274, 59, 361, 527, 710, 289, 949, 270, 392, 652, 641, 997, 133, 79, 65, 501, 150, 214, 310, 890, 239, 959, 958, 833, 24, 137, 693, 337, 12, 929, 648, 125, 45, 607, 775, 704, 135, 432, 132, 474, 141, 219, 910, 778, 247, 477, 485, 953, 638, 795, 226, 716, 74, 446, 390, 87, 89, 366, 581, 440, 504, 1000, 743, 345, 357, 875, 943, 100, 546, 921, 255, 542, 265, 866, 801, 722, 755, 524, 245, 666, 829, 223, 897, 312, 454, 643, 34, 588, 838, 249, 403, 272, 459, 356, 719, 273, 82, 761, 594, 0, 193, 862, 815, 549, 992, 991, 229, 159, 69, 50, 979, 48, 182, 864, 426, 33, 365, 848, 603, 881, 768, 590, 153, 741, 211, 451, 391, 662, 388, 788, 718, 320, 529, 663, 855, 981, 282, 196, 61, 885, 215, 657, 284, 457, 350, 21, 942, 54, 965, 379, 985, 733, 822, 372, 694, 5, 558, 525, 111, 250, 86, 967, 962, 677, 298, 16, 805, 912, 335, 324, 764, 269, 23, 526, 845, 579, 742, 353, 782, 40, 497, 354, 651, 749, 711, 464, 798, 728, 163, 530, 55, 760, 783, 80, 909, 895, 930, 369, 427, 613, 465, 502, 240, 562, 847, 577, 450, 494, 707, 94, 937, 762, 463, 821, 836, 395, 115, 101, 428, 478, 213, 861, 983, 557, 374, 355, 708, 747, 709, 409, 119, 552, 187, 823, 576, 679, 387, 158, 598, 572, 188, 646, 417, 685, 462, 121, 944, 664, 442, 291, 227, 237, 841, 956, 210, 1, 799, 915, 338, 422, 404, 32, 415, 228, 869, 745, 601, 514, 192, 800, 71, 280, 580, 64, 570, 661, 968, 548, 977, 482, 254, 639, 162, 802, 430, 777, 700, 6, 532, 99, 122, 113, 140, 95, 860, 773, 740, 30, 859, 373, 431, 68, 138, 540, 275, 518, 37, 963, 840, 351, 41, 982, 786, 209, 721, 144, 665, 397, 776, 706, 531, 884, 513, 744, 218, 168, 92, 419, 414, 630, 44, 536, 3, 295, 385, 83, 989, 602, 383, 654, 293, 636, 794, 244, 916, 96, 376, 920, 327, 9, 876, 42, 554, 571, 545, 925, 695, 690, 911, 85, 830, 627, 725, 512, 438, 931, 567, 902, 784, 692, 606, 46, 8, 889, 126, 984, 60, 750, 941, 703, 460, 172, 108, 520, 328, 73, 382, 771, 980, 364, 669, 491, 276, 127, 640, 727, 852, 660, 143, 868, 569, 674, 587, 134, 924, 510, 927, 434, 832, 114, 259, 230, 904, 947, 896, 702, 216, 914, 11, 476, 812, 756, 317, 444, 604, 333, 181, 966, 304, 286, 179, 303, 813, 844, 251, 325, 164, 480, 331, 837, 323, 612, 877, 522, 672, 262, 878, 246, 10, 236, 413, 256, 879, 123, 589, 616, 148, 197, 926, 894, 917, 368, 67, 201, 541, 668, 496, 120, 104, 470, 676, 950, 195, 996, 475, 468, 563, 235, 340, 714, 19, 194, 22, 433, 363, 770, 173, 551, 157, 412, 130, 490, 839, 905, 318, 623, 537, 659, 824, 615, 27, 129, 809, 315, 405, 199, 29, 106, 843, 386, 751, 528, 611, 161, 118, 112, 263, 599, 851, 124, 605, 316, 170, 57, 736, 553, 90, 779, 495, 578, 449, 971, 261, 225, 352, 701, 990, 91, 52, 797 };
	//my_heap h(tab, 100);
	//h.print_tree();
	//my_list l(tab, 9);
	//std::cout << l.contains(8) << std::endl;

	my_rbtree rbt(tab, 9);
	rbt.print_tree();
	rbt.remove(6);
	rbt.print_tree();

	rbt.remove(8);
	rbt.print_tree();

}

//ofstream fout("data.txt", ios::out);
//if(fout.is_open())
//{
//	fout << TAB_SIZE << endl;
//	for(int i=0; i< TAB_SIZE; i++)
//	{
//		fout << tab[i] << endl;
//	}
//}
//fout.close();


//int readTabSize;
//int* readTab = nullptr;

//ifstream fin("data.txt", ios::in);
//if(fin.is_open())
//{
//	fin >> readTabSize;
//	readTab = new int[readTabSize];
//	for (int i = 0; i < readTabSize; i++)
//	{
//		fin >> readTab[i];
//	}
//}
//fin.close();

//if (readTab != nullptr)
//{
//	for (int i = 0; i < readTabSize; i++)
//	{
//		cout << readTab[i] << endl;
//	}
//	
//}

//delete[] tab;
//delete[] readTab;

//time_logger timeLogger{};
//for(int i=0; i<10; i++)
//{
//	timeLogger.start();
//	Sleep(1000);
//	timeLogger.stop();
//	cout << timeLogger.get_time_span() << endl;
//}

//cout << endl << timeLogger.mean() << endl;